//=================================================AUTH_PLUGIN==================================================================================
var AuthPlugin = function() {
};

AuthPlugin.prototype.authenticateProcess = function(str, success, fail) {
PhoneGap.exec(success, fail, "AuthPlugin", "authenticate", [str]);
};

/**
* Method authenticate.
* @param appName String
* @param metadata String
* @param url String
* @param userName String
* @param passWord String
* @param companyAlias String
* @param feusrid String
* @param deviceType String
* @param loginCallBack function
*/
AuthPlugin.prototype.authenticate=function(appName,metadata,url,userName,passWord,companyAlias,deviceType,customDeviceId,namespace,loginCallBack) {

var query ={"APP_NAME":appName,
"METADATA":metadata,
"URL":url,
"USER_ID":userName,
"PASSWORD":passWord,
"COMPANY_ALIAS":companyAlias,
"FEUSRID":customDeviceId,
"DEVICE_TYPE":deviceType,
"NAMESPACE":namespace};

this.authenticateProcess(query,function(result){loginCallBack(result);},function(e){console.log(e);});
};

PhoneGap.addConstructor(function() {
if (!window.plugins) {
window.plugins = {};
}
window.plugins.AuthPlugin = new AuthPlugin();
});

//===============================================================DATABASE_PLUGIN====================================================================
var DatabasePlugin = function() {
};

//Prototype for INSERT...
DatabasePlugin.prototype.insertQuery = function(str, success, fail) {
PhoneGap.exec(success, fail, "DatabasePlugin", "insert", [str]);
};

//Prototype for INSERT_BUSINESS_ENTITY...
DatabasePlugin.prototype.insertBEQuery = function(str, success, fail) {
PhoneGap.exec(success, fail, "DatabasePlugin", "insertBE", str);
};

//Prototype for SELECT operation...
DatabasePlugin.prototype.selectQuery = function(str, success, fail) {
PhoneGap.exec(success, fail, "DatabasePlugin", "select", [str]);
};

//Prototype for DELETE operation...
DatabasePlugin.prototype.deleteQuery = function(str, success, fail) {
PhoneGap.exec(success, fail, "DatabasePlugin", "delete", [str]);
};

//Prototype for UPDATE...
DatabasePlugin.prototype.updateQuery = function(str, success, fail) {
PhoneGap.exec(success, fail, "DatabasePlugin", "update", [str]);
};

//=========================================INSERT_QUERY================================================
/**
* Method insert.
* @param tableName String
* @param fieldObject Object
* @param isHeader Boolean
* @param insertQueryCallback functionName
* returns LID
*/
DatabasePlugin.prototype.insert=function(tableName, fieldObject, isHeader,insertQueryCallback) {

var query={"tableName":tableName,
"isHeader":isHeader,
"fields":fieldObject };
this.insertQuery(query,function(result){insertQueryCallback(result);},function(e){console.log(e);});
};

//=========================================INSERT_BE_QUERY================================================
/**
* @param BEArray Array
* @param insertBEQueryCallback functionName
*/
DatabasePlugin.prototype.insertBE=function(BEArray,insertBEQueryCallback) {
this.insertBEQuery(BEArray,function(result){insertBEQueryCallback(result);},function(e){console.log(e);});
};

//============================================SELECT_QUERY================================================
/**
* Method retrieve.
* @param tableName String
* @param  whereClause String
* @param selectSuccessCallback function name
*/
DatabasePlugin.prototype.select=function(tableName, whereClause, selectSuccessCallback){
var query="";
if(whereClause=="" || whereClause==null || whereClause==undefined)
{
query={"tableName":tableName,"whereClause":""};
}else{
query={"tableName":tableName,"whereClause":whereClause};
}
this.selectQuery(query,function(result){selectSuccessCallback(result);},function(e){console.log(e);});
};

//===============================================DELETE_QUERY================================================
/**
* Method delete.
* @param tableName String
* @param columnNames Array
* @param columnValues Array
*/
DatabasePlugin.prototype.deleteItem=function(tableName,whereClause,deleteQueryCallback){

var query="";
if(whereClause=="" || whereClause==null || whereClause==undefined)
{
query={"tableName":tableName,"whereClause":""};
}else{
query={"tableName":tableName,"whereClause":whereClause};
}
this.deleteQuery(query,function(){deleteQueryCallback();},function(e){console.log(e);});
};

//===========================================UPDATE_QUERY=================================================
/**
* Method retrieve.
* @param tableName String
* @param setfieldObject Object
* @param whereClause String
* @param isHeader Boolean
*/
DatabasePlugin.prototype.update=function(tableName, setfieldObject,whereClause,updateQueryCallback){

var query="";
query=this.prepareUpdateQuery(tableName, setfieldObject,whereClause);
this.updateQuery(query,function(){updateQueryCallback();},function(e){console.log(e);});
};

function updateQueryCallback()
{
console.log("Record successfully updated");
}

DatabasePlugin.prototype.prepareUpdateQuery=function(tableName, setfieldObject,whereClause)
{
var tableObj=new Object();
tableObj={"tableName":tableName,
"fields":setfieldObject,
"whereClause":whereClause};
return tableObj;
};

PhoneGap.addConstructor(function() {
if (!window.plugins) {
window.plugins = {};
}
window.plugins.DatabasePlugin = new DatabasePlugin();
});


//===============================================================FWSETTINGS_PLUGIN===============================================================
var FWSettingsPlugin = function() {
};
FWSettingsPlugin.prototype.startSettingActivity=function() {

PhoneGap.exec('', '', "FWSettingsPlugin", "startSettingActivity", []);
};
PhoneGap.addConstructor(function() {
if (!window.plugins) {
window.plugins = {};
}
window.plugins.FWSettingsPlugin = new FWSettingsPlugin();
});


//=========================================================RUNTIME_PLUGIN=========================================================================
var RuntimePlugin = function() {
};

RuntimePlugin.prototype.shutdownApp = function(str) {
PhoneGap.exec(null, null, "RuntimePlugin", "shutdownApp",[str]);
};

PhoneGap.addConstructor(function() {
if (!window.plugins) {
window.plugins = {};
}
window.plugins.RuntimePlugin = new RuntimePlugin();
});

//===========================================================SYNCENGINE_PLUGIN====================================================================
var SyncEnginePlugin = function() {
};

//Prototype for DATA SENDER in ASYNCHRONOUS MODE...
SyncEnginePlugin.prototype.sendDataInAsyncModeProcess = function(str, success, fail) {
PhoneGap.exec(success, fail, "SyncEnginePlugin", "sendDataInAsyncMode", [str]);
};

//Prototype for DATA SENDER in SYNCHRONOUS MODE...
SyncEnginePlugin.prototype.sendDataInSyncModeProcess = function(str, success, fail) {
PhoneGap.exec(success, fail, "SyncEnginePlugin", "sendDataInSyncMode", [str]);
};

//Prototype for DATA RECEIVER get messages in background...
SyncEnginePlugin.prototype.getMessagesInBackgroundProcess = function(str, success, fail) {
PhoneGap.exec(success, fail, "SyncEnginePlugin", "getMessagesInBackground", [str]);
};

//Prototype for Generate IBXM...
SyncEnginePlugin.prototype.generateMessageProcess = function(str, success, fail) {
PhoneGap.exec(success, fail, "SyncEnginePlugin", "generateIbxml", [str]);
};
//=================================ASYNC_MODE=============================================
/**
* Method sendDataInAsyncMode.
* @param BEArray Array
* @param companyNamespace String
* @param processAgentFunctionName String
*/
SyncEnginePlugin.prototype.sendDataInAsyncMode=function(BEObj,companyNamespace,processAgentFunctionName,callBack) {
var query ={
"BE":BEObj,
"companyNamespace":companyNamespace,
"processAgentFunctionName":processAgentFunctionName
};
this.sendDataInAsyncModeProcess(query,function(result){callBack(result);},function(e){console.log(e);});
};
//=================================SYNC_MODE=============================================
/**
* Method sendDataInSyncMode.
* @param customData String
* @param beName String
* @param beId String
* @param companyNamespace String
* @param processAgentFunctionName String
* @param sendDataInSyncModeCallback function
*/
SyncEnginePlugin.prototype.sendDataInSyncMode=function(customData,beName,beId,companyNamespace,processAgentFunctionName,sendDataInSyncModeCallback) {
var query ={
"customData":customData,
"beName":beName,
"beId":beId,
"companyNamespace":companyNamespace,
"processAgentFunctionName":processAgentFunctionName
};
this.sendDataInSyncModeProcess(query,function(result){sendDataInSyncModeCallback(result);},function(e){console.log(e);});
};
//=================================GET_MESSAGES_IN_BACKGROUND=============================================

SyncEnginePlugin.prototype.getMessagesInBackground=function(callBack) {
var query ="";
this.getMessagesInBackgroundProcess(query,function(result){callBack(result);},function(e){console.log(e);});
};
//=================================GENERATE_MESSAGE_IBXML=================================================
/**
* Method generateIBXML.
* @param headerDataStructure String
* @param itemDataStructureArray  Array String
* @param generateMessageCallBack function
*/
SyncEnginePlugin.prototype.generateIBXML=function(headerName,headerDataStructure,itemName,itemDataStructures,generateMessageCallBack) {
var query ={
"HEADER_TABLE_NAME":headerName,
"HEADER":headerDataStructure,
"ITEM_TABLE_NAME":itemName,
"ITEMS":itemDataStructures
};

this.generateMessageProcess(query,function(result){generateMessageCallBack(result);},function(e){console.log(e);});
};

PhoneGap.addConstructor(function() {
if (!window.plugins) {
window.plugins = {};
}
window.plugins.SyncEnginePlugin = new SyncEnginePlugin();
});

//======================================================JSON_TO_BE_CONVERTER======================================================================
function getBEFromJsonObject(jsonObj) {

	var BE = new Array();
	var beList = jsonObj.IndienceMessage.data.Application.BusinessEntity;
	if (beList != null) {
	//for more than 1 BisinessEntity...
	if(beList instanceof Array){
	for ( var i = 0; i < beList.length; i++) {
	var headerObj = {};
	var iList = new Array();

	// get headers...
	var headerFieldList = beList[i].header.Field;
	var headerName=beList[i].header.name;
	var hfieldObj = {};
	for ( var j = 0; j < headerFieldList.length; j++) {
	hfieldObj[headerFieldList[j].name] = headerFieldList[j].content;
	}
	headerObj["HEADER"] = hfieldObj;
	headerObj["NAME"]=headerName;
	hfieldObj = null;

	// get items...
	var itemList = beList[i].item;
	//for more than 1 item...
	if(itemList instanceof Array){
	for ( var k = 0; k < itemList.length; k++) {
	var ifieldObj = {};
	var itemObj={};
	var itemFieldList = itemList[k].Field;
	var itemName=itemList[k].name;
	for ( var n = 0; n < itemFieldList.length; n++) {
	ifieldObj[itemFieldList[n].name] = itemFieldList[n].content;
	}
	itemObj["ITEM"]=ifieldObj;
	itemObj["NAME"]=itemName;
	iList.push(itemObj);
	ifieldObj = null;
	itemObj=null;
	}
	}
	//for only 1 item...
	else if(itemList instanceof Object){
	var ifieldObj = {};
	var itemObj={};
	var itemFieldList = itemList.Field;
	var itemName=itemList.name;
	for ( var n = 0; n < itemFieldList.length; n++) {
	ifieldObj[itemFieldList[n].name] = itemFieldList[n].content;
	}
	itemObj["ITEM"]=ifieldObj;
	itemObj["NAME"]=itemName;
	iList.push(itemObj);
	ifieldObj = null;
	itemObj=null;
	}
	headerObj["ITEMS"] = iList;
	iList = null;
	BE.push(headerObj);
	}
	}
	//for only 1 BusinessEntity...
	else if(beList instanceof Object){
	var headerObj = {};
	var iList = new Array();

	// get headers...
	var headerFieldList = beList.header.Field;
	var headerName=beList.header.name;
	var hfieldObj = {};
	for ( var j = 0; j < headerFieldList.length; j++) {
	hfieldObj[headerFieldList[j].name] = headerFieldList[j].content;
	}
	headerObj["HEADER"] = hfieldObj;
	headerObj["NAME"]=headerName;
	hfieldObj = null;

	// get items...
	var itemList = beList.item;
	//for more than 1 item...
	if(itemList instanceof Array){
	for ( var k = 0; k < itemList.length; k++) {
	var ifieldObj = {};
	var itemObj={};
	var itemFieldList = itemList[k].Field;
	var itemName=itemList[k].name;
	for ( var n = 0; n < itemFieldList.length; n++) {
	ifieldObj[itemFieldList[n].name] = itemFieldList[n].content;
	}
	itemObj["ITEM"]=ifieldObj;
	itemObj["NAME"]=itemName;
	iList.push(itemObj);
	ifieldObj = null;
	itemObj=null;
	}
	}
	//for 1 item...
	else if(itemList instanceof Object){
	var ifieldObj = {};
	var itemObj={};
	var itemFieldList = itemList.Field;
	var itemName=itemList.name;
	for ( var n = 0; n < itemFieldList.length; n++) {
	ifieldObj[itemFieldList[n].name] = itemFieldList[n].content;
	}
	itemObj["ITEM"]=ifieldObj;
	itemObj["NAME"]=itemName;
	iList.push(itemObj);
	ifieldObj = null;
	itemObj=null;
	}
	headerObj["ITEMS"] = iList;
	iList = null;
	BE.push(headerObj);
	}
	}
	return BE;
	}