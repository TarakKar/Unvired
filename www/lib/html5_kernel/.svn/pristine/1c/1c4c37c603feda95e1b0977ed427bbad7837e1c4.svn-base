/*
 * Unvired html5_kernel.js version 1.0
 * Dependencies: 1.cordova.js 2.0+  2.cordova.jar 2.0+
 */

//===============================================================DATABASE_PLUGIN====================================================================

cordova.define("cordova/plugin/DatabasePlugin", 
   function(require, exports, module) {
	 var exec = require("cordova/exec");
	
	 var DatabasePlugin = function () {};

	//=========================================INSERT_QUERY================================================
	 /**
	 * Method insert.
	 * @param tableName String
	 * @param fieldObject Object
	 * @param isHeader Boolean
	 * @param insertQueryCallback functionName
	 * returns LID
	 */
	 DatabasePlugin.prototype.insert=function(tableName, fieldObject, isHeader,insertQueryCallback) {

	 var query={"tableName":tableName,
	 "isHeader":isHeader,
	 "fields":fieldObject };
	 cordova.exec(function(result){insertQueryCallback(result);},function(e){console.log(e);}, "DatabasePlugin", "insert", [query]);
	 };

	 //=========================================INSERT_BE_QUERY================================================
	 /**
	 * @param BEArray Array
	 * @param insertBEQueryCallback functionName
	 */
	 DatabasePlugin.prototype.insertBE=function(BEArray,insertBEQueryCallback) {
	
		 cordova.exec(function(result){insertBEQueryCallback(result);},function(e){console.log(e);}, "DatabasePlugin", "insertBE", BEArray);
	};

	 //============================================SELECT_QUERY================================================
	 /**
	 * Method retrieve.
	 * @param tableName String
	 * @param  whereClause String
	 * @param selectSuccessCallback function name
	 */
	 DatabasePlugin.prototype.select=function(tableName, whereClause, selectSuccessCallback){
	 var query="";
	 if(whereClause=="" || whereClause==null || whereClause==undefined)
	 {
	 query={"tableName":tableName,"whereClause":""};
	 }else{
	 query={"tableName":tableName,"whereClause":whereClause};
	 }
	 cordova.exec(function(result){selectSuccessCallback(result);},function(e){console.log(e);}, "DatabasePlugin", "select", [query]);
	 };

	 //===============================================DELETE_QUERY================================================
	 /**
	 * Method delete.
	 * @param tableName String
	 * @param columnNames Array
	 * @param columnValues Array
	 */
	 DatabasePlugin.prototype.deleteItem=function(tableName,whereClause,deleteQueryCallback){

	 var query="";
	 if(whereClause=="" || whereClause==null || whereClause==undefined)
	 {
	 query={"tableName":tableName,"whereClause":""};
	 }else{
	 query={"tableName":tableName,"whereClause":whereClause};
	 }
	 cordova.exec(function(){deleteQueryCallback();},function(e){console.log(e);}, "DatabasePlugin", "delete", [query]);
	 };

	 //===========================================UPDATE_QUERY=================================================
	 /**
	 * Method retrieve.
	 * @param tableName String
	 * @param setfieldObject Object
	 * @param whereClause String
	 * @param isHeader Boolean
	 */
	 DatabasePlugin.prototype.update=function(tableName, setfieldObject,whereClause,updateQueryCallback){

	// query=this.prepareUpdateQuery(tableName, setfieldObject,whereClause);
	 var query={"tableName":tableName,
		 "fields":setfieldObject,
		 "whereClause":whereClause
	 };
	 cordova.exec(function(result){updateQueryCallback(result);},function(e){console.log(e);}, "DatabasePlugin", "update", [query]);
	 };

	var databasePlugin = new DatabasePlugin();
    module.exports = databasePlugin;		    	
});

//===============================================================FWSETTINGS_PLUGIN===============================================================
cordova.define("cordova/plugin/FWSettingsPlugin", 
    function(require, exports, module) {
	    var exec = require("cordova/exec");

 	    var FWSettingsPlugin = function () {};
		   
 	   FWSettingsPlugin.prototype.startSettingActivity=function() {

 		  cordova.exec('', '', "FWSettingsPlugin", "startSettingActivity", []);
 	   };  
		
	    var fWSettingsPlugin = new FWSettingsPlugin();
	    module.exports = fWSettingsPlugin;
});


//=========================================================RUNTIME_PLUGIN=========================================================================
cordova.define("cordova/plugin/RuntimePlugin", 
	 function(require, exports, module) {
	    var exec = require("cordova/exec");

	    var RuntimePlugin = function () {};
			   
	   RuntimePlugin.prototype.shutdownApp = function(str) {
	   cordova.exec(null, null, "RuntimePlugin", "shutdownApp",[str]);
	   };
			
	   var runtimePlugin = new RuntimePlugin();
	   module.exports = runtimePlugin;
});


//===========================================================SYNCENGINE_PLUGIN====================================================================
cordova.define("cordova/plugin/SyncEnginePlugin", 
	function(require, exports, module) {
	var exec = require("cordova/exec");

	var SyncEnginePlugin = function () {};
	
	//=================================ASYNC_MODE=============================================
	/**
	* Method sendDataInAsyncMode.
	* @param BEArray Array
	* @param companyNamespace String
	* @param processAgentFunctionName String
	*/
	SyncEnginePlugin.prototype.sendDataInAsyncMode=function(BEObj,companyNamespace,processAgentFunctionName,callBack) {
	var query ={
	"BE":BEObj,
	"companyNamespace":companyNamespace,
	"processAgentFunctionName":processAgentFunctionName
	};
	cordova.exec(function(){callBack();},function(e){console.log(e);}, "SyncEnginePlugin", "sendDataInAsyncMode", [query]);
	};
	//=================================SYNC_MODE=============================================
	/**
	* Method sendDataInSyncMode.
	* @param customData String
	* @param beName String
	* @param beId String
	* @param companyNamespace String
	* @param processAgentFunctionName String
	* @param sendDataInSyncModeCallback function
	*/
	SyncEnginePlugin.prototype.sendDataInSyncMode=function(customData,beName,beId,companyNamespace,processAgentFunctionName,sendDataInSyncModeCallback) {
	var query ={
	"customData":customData,
	"beName":beName,
	"beId":beId,
	"companyNamespace":companyNamespace,
	"processAgentFunctionName":processAgentFunctionName
	};
	cordova.exec(function(result){sendDataInSyncModeCallback(result);},function(e){console.log(e);}, "SyncEnginePlugin", "sendDataInSyncMode", [query]);
	};
	//=================================GET_MESSAGES_IN_BACKGROUND=============================================

	SyncEnginePlugin.prototype.getMessagesInBackground=function(callBack) {
	var query ="";
	cordova.exec(function(result){callBack(result);},function(e){console.log(e);}, "SyncEnginePlugin", "getMessagesInBackground", [query]);
	};
	//=================================GENERATE_MESSAGE_IBXML=================================================
	/**
	* Method generateIBXML.
	* @param headerDataStructure String
	* @param itemDataStructureArray  Array String
	* @param generateMessageCallBack function
	*/
	SyncEnginePlugin.prototype.generateIBXML=function(headerName,headerDataStructure,itemName,itemDataStructures,generateMessageCallBack) {
	var query ={
	"HEADER_TABLE_NAME":headerName,
	"HEADER":headerDataStructure,
	"ITEM_TABLE_NAME":itemName,
	"ITEMS":itemDataStructures
	};
	cordova.exec(function(result){generateMessageCallBack(result);},function(e){console.log(e);}, "SyncEnginePlugin", "generateIbxml", [query]);
	};
	
	//================================================REGISTER_LISTENERS============================================
	/*
	 * Call this to function to register listeners for data sending and data receiving respectively...
	 */
	SyncEnginePlugin.prototype.registerDataSenderListener=function(senderCallBack) {

		  cordova.exec(function(result){senderCallBack(result);},function(e){console.log(e);}, "SyncEnginePlugin", "registerSenderListener", []);
	 }; 
	   
	 SyncEnginePlugin.prototype.registerDataReceiverListener=function(receiverCallback) {

		  cordova.exec(function(result){receiverCallback(result);},function(e){console.log(e);}, "SyncEnginePlugin", "registerReceiverListener", []);
	 }; 

	var syncEnginePlugin = new SyncEnginePlugin();
	module.exports = syncEnginePlugin;
});

//======================================================JSON_TO_BE_CONVERTER======================================================================
function getBEFromJsonObject(jsonObj) {

	var BE = new Array();
	var beList = jsonObj.IndienceMessage.data.Application.BusinessEntity;
	if (beList != null) {
	//for more than 1 BisinessEntity...
	if(beList instanceof Array){
	for ( var i = 0; i < beList.length; i++) {
	var headerObj = {};
	var iList = new Array();

	// get headers...
	var headerFieldList = beList[i].header.Field;
	var headerName=beList[i].header.name;
	var hfieldObj = {};
	for ( var j = 0; j < headerFieldList.length; j++) {
	hfieldObj[headerFieldList[j].name] = headerFieldList[j].content;
	}
	headerObj["HEADER"] = hfieldObj;
	headerObj["NAME"]=headerName;
	hfieldObj = null;

	// get items...
	var itemList = beList[i].item;
	//for more than 1 item...
	if(itemList instanceof Array){
	for ( var k = 0; k < itemList.length; k++) {
	var ifieldObj = {};
	var itemObj={};
	var itemFieldList = itemList[k].Field;
	var itemName=itemList[k].name;
	for ( var n = 0; n < itemFieldList.length; n++) {
	ifieldObj[itemFieldList[n].name] = itemFieldList[n].content;
	}
	itemObj["ITEM"]=ifieldObj;
	itemObj["NAME"]=itemName;
	iList.push(itemObj);
	ifieldObj = null;
	itemObj=null;
	}
	}
	//for only 1 item...
	else if(itemList instanceof Object){
	var ifieldObj = {};
	var itemObj={};
	var itemFieldList = itemList.Field;
	var itemName=itemList.name;
	for ( var n = 0; n < itemFieldList.length; n++) {
	ifieldObj[itemFieldList[n].name] = itemFieldList[n].content;
	}
	itemObj["ITEM"]=ifieldObj;
	itemObj["NAME"]=itemName;
	iList.push(itemObj);
	ifieldObj = null;
	itemObj=null;
	}
	headerObj["ITEMS"] = iList;
	iList = null;
	BE.push(headerObj);
	}
	}
	//for only 1 BusinessEntity...
	else if(beList instanceof Object){
	var headerObj = {};
	var iList = new Array();

	// get headers...
	var headerFieldList = beList.header.Field;
	var headerName=beList.header.name;
	var hfieldObj = {};
	for ( var j = 0; j < headerFieldList.length; j++) {
	hfieldObj[headerFieldList[j].name] = headerFieldList[j].content;
	}
	headerObj["HEADER"] = hfieldObj;
	headerObj["NAME"]=headerName;
	hfieldObj = null;

	// get items...
	var itemList = beList.item;
	//for more than 1 item...
	if(itemList instanceof Array){
	for ( var k = 0; k < itemList.length; k++) {
	var ifieldObj = {};
	var itemObj={};
	var itemFieldList = itemList[k].Field;
	var itemName=itemList[k].name;
	for ( var n = 0; n < itemFieldList.length; n++) {
	ifieldObj[itemFieldList[n].name] = itemFieldList[n].content;
	}
	itemObj["ITEM"]=ifieldObj;
	itemObj["NAME"]=itemName;
	iList.push(itemObj);
	ifieldObj = null;
	itemObj=null;
	}
	}
	//for 1 item...
	else if(itemList instanceof Object){
	var ifieldObj = {};
	var itemObj={};
	var itemFieldList = itemList.Field;
	var itemName=itemList.name;
	for ( var n = 0; n < itemFieldList.length; n++) {
	ifieldObj[itemFieldList[n].name] = itemFieldList[n].content;
	}
	itemObj["ITEM"]=ifieldObj;
	itemObj["NAME"]=itemName;
	iList.push(itemObj);
	ifieldObj = null;
	itemObj=null;
	}
	headerObj["ITEMS"] = iList;
	iList = null;
	BE.push(headerObj);
	}
	}
	return BE;
	}